
PCPTMSORT - Tracking Merge Sort

Your goal is to sort a sequence A[0..n-1] of integers, where n <= 1000000 using the following MergeSort algorithm.

MergeSort(A,0,n-1);
where
/* A is an array of integers,
L and R are integers denoting left and right index */
MergeSort(A, L, R) :
        M = (L+R)/2; /* middle element */
        if (L < R-1) /* >= 3 elements */
                if (L < M) MergeSort(A,L,M);
                if (M+1 < R) MergeSort(A,M+1,R);
                /* printing information [L:M:R] Mval [Lmin Rmin] */
        if (L < R) Merge(A,L,M,R);
and the function
Merge(A,L,M,R)
merges two sorted subarrays: A[L..M]and A[M+1..R]
To ensure the proper implementation of MergeSort algorithm, you have to write to the output the initial sequence, then the information about middle element (index=M and its value=A[M]) and the minimum elements in the left and right subarrays, and, finally, the sorted sequence, e.g., for the input

8
20 11 18 15 0 14 22 25
you have to print the output
20 11 18 15 0 14 22 25
[0:1:3] 11 [11 15]
[4:5:7] 14 [0 22]
[0:3:7] 15 [11 0]
0 11 14 15 18 20 22 25
In the first and in the last lines are the initial sequence and the sorted sequence, respectively. Each remaining line has the following syntax:
[L:M:R] Mval [Lmin Rmin]
where L, M, R are indices in array A defined as in algorithm, Mval is value A[M] (in the initial sequence) and Lmin and Rmin are the minimum values in A[L..M] and A[M+1..R], respectively, e.g., for
[4:5:7] 14 [0 22]
we may check that A[5]=14 and 0 and 22 are the minimum elements in subarrays A[4..5]=[0 14] and A[6..7]=[22 25].
Input
In the first line there is a number n of elements in a sequence , where n <= 1000000, followed by the sequence of n integers in the next line.

Output
In the first line print the initial sequence. Then, print the additional information as described above, first for the left subarray, then for the right subarray.

Example 1
Input:
10
64 20 6 84 41 90 56 88 53 58

Output:
64 20 6 84 41 90 56 88 53 58
[0:1:2] 20 [20 6]
[0:2:4] 6 [6 41]
[5:6:7] 56 [56 88]
[5:7:9] 88 [56 53]
[0:4:9] 41 [6 53]
6 20 41 53 56 58 64 84 88 90
Example 2
Input:
15
42 46 39 2 6 32 10 0 46 43 48 43 1 49 20

Output:
42 46 39 2 6 32 10 0 46 43 48 43 1 49 20
[0:1:3] 46 [42 2]
[4:5:7] 32 [6 0]
[0:3:7] 2 [2 0]
[8:9:11] 43 [43 43]
[12:13:14] 49 [1 20]
[8:11:14] 43 [43 1]
[0:7:14] 0 [0 1]
0 1 2 6 10 20 32 39 42 43 43 46 46 48 49